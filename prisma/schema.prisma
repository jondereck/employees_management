generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_URL_UNPOOLED")
  relationMode = "foreignKeys"
}

model Department {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("DepartmentToBillboard")
  employee   Employee[]  @relation("DepartmentToEmployee")
  offices    Offices[]   @relation("DepartmentToOffices")
}

model Billboard {
  id           String     @id @default(uuid())
  departmentId String
  label        String
  imageUrl     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation("DepartmentToBillboard", fields: [departmentId], references: [id], onUpdate: NoAction, map: "billboard_departmentid_fkey")
  offices      Offices[]

  @@index([departmentId])
}

model Offices {
  id                  String     @id @default(uuid())
  departmentId        String
  billboardId         String
  name                String
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  designatedEmployees Employee[] @relation("OfficesToDesignation")
  employee            Employee[] @relation("OfficesToEmployee")
  billboard           Billboard  @relation(fields: [billboardId], references: [id], onUpdate: NoAction, map: "offices_billboardid_fkey")
  department          Department @relation("DepartmentToOffices", fields: [departmentId], references: [id], onUpdate: NoAction, map: "offices_departmentid_fkey")

  @@index([departmentId])
  @@index([billboardId])
}

model EmployeeType {
  id           String     @id @default(uuid())
  departmentId String
  name         String
  value        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  employee     Employee[]

  @@index([departmentId])
}

model Eligibility {
  id               String           @id @default(uuid())
  departmentId     String
  eligibilityTypes EligibilityTypes
  name             String
  value            String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  employee         Employee[]

  @@index([departmentId])
}

model Employee {
  id                     String            @id @default(uuid())
  departmentId           String
  officeId               String
  prefix                 String            @default("")
  lastName               String
  firstName              String
  middleName             String
  suffix                 String
  gender                 Gender
  contactNumber          String
  position               String
  education              String
  birthday               DateTime
  age                    String            @default("")
  region                 String            @default("")
  province               String            @default("")
  city                   String            @default("")
  barangay               String            @default("")
  houseNo                String            @default("")
  street                 String            @default("")
  gsisNo                 String
  tinNo                  String
  philHealthNo           String
  pagIbigNo              String
  salary                 Float
  dateHired              DateTime
  latestAppointment      String            @default("")
  terminateDate          String            @default("")
  memberPolicyNo         String            @default("")
  employeeTypeId         String
  eligibilityId          String
  isFeatured             Boolean           @default(false)
  isArchived             Boolean           @default(false)
  isHead                 Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  emergencyContactName   String            @default("")
  emergencyContactNumber String            @default("")
  isAwardee              Boolean           @default(false)
  nickname               String            @default("")
  employeeNo             String            @default("")
  employeeLink           String            @default("")
  salaryStep             Int?              @default(0)
  salaryGrade            Int?              @default(0)
  designationId          String?
  note                   String?
  publicId               String            @unique @default(dbgenerated("gen_random_uuid()"))
  publicEnabled          Boolean           @default(false)
  publicVersion          Int               @default(1)
  awards                 Award[]
  department             Department        @relation("DepartmentToEmployee", fields: [departmentId], references: [id], onUpdate: NoAction, map: "employee_departmentid_fkey")
  designation            Offices?          @relation("OfficesToDesignation", fields: [designationId], references: [id], onUpdate: NoAction, map: "employee_designationid_fkey")
  eligibility            Eligibility       @relation(fields: [eligibilityId], references: [id], onUpdate: NoAction, map: "employee_eligibilityid_fkey")
  employeeType           EmployeeType      @relation(fields: [employeeTypeId], references: [id], onUpdate: NoAction, map: "employee_employeetypeid_fkey")
  offices                Offices           @relation("OfficesToEmployee", fields: [officeId], references: [id], onUpdate: NoAction, map: "employee_officeid_fkey")
  employmentEvents       EmploymentEvent[]
  images                 Image[]

  @@index([departmentId])
  @@index([officeId])
  @@index([employeeTypeId])
  @@index([eligibilityId])
  @@index([designationId])
}

model Image {
  id         String   @id @default(uuid())
  employeeId String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "image_employeeid_fkey")

  @@index([employeeId])
}

model Salary {
  id     Int   @id @default(autoincrement())
  grade  Int
  step   Int
  amount Float

  @@unique([grade, step])
}

model EmploymentEvent {
  id         String              @id @default(dbgenerated("gen_random_uuid()"))
  employeeId String
  type       EmploymentEventType
  details    String?
  occurredAt DateTime
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  employee   Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, occurredAt])
}

model Award {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  employeeId  String
  title       String
  description String?
  givenAt     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
}

enum EligibilityTypes {
  None
  Professional
  SubProffessional
}

enum Gender {
  Male
  Female
}

enum EmploymentEventType {
  HIRED
  PROMOTED
  TRANSFERRED
  REASSIGNED
  AWARDED
  CONTRACT_RENEWAL
  TERMINATED
  OTHER
}
