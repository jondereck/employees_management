// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_URL_UNPOOLED")
  relationMode = "prisma"
}

model Department {
  id           String         @id @default(uuid())
  name         String
  userId       String
  billboards   Billboard[]    @relation("DepartmentToBillboard")
  offices      Offices[]      @relation("DepartmentToOffices")
  employeeType EmployeeType[] @relation("DepartmentToEmployeeType")
  eligibility  Eligibility[]  @relation("DepartmentToEligibility")
  employee     Employee[]     @relation("DepartmentToEmployee")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Billboard {
  id           String     @id @default(uuid())
  departmentId String
  department   Department @relation("DepartmentToBillboard", fields: [departmentId], references: [id])
  label        String
  imageUrl     String
  offices      Offices[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([departmentId])
}

model Offices {
  id           String     @id @default(uuid())
  departmentId String
  department   Department @relation("DepartmentToOffices", fields: [departmentId], references: [id])
  billboardId  String
  billboard    Billboard  @relation(fields: [billboardId], references: [id])
  employee     Employee[] @relation("OfficesToEmployee")
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([departmentId])
  @@index([billboardId])
}

model EmployeeType {
  id           String     @id @default(uuid())
  departmentId String
  department   Department @relation("DepartmentToEmployeeType", fields: [departmentId], references: [id])
  employee     Employee[] @relation()
  name         String
  value        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([departmentId])
}

enum EligibilityTypes {
  None
  Professional
  SubProffessional
}

model Eligibility {
  id               String           @id @default(uuid())
  departmentId     String
  department       Department       @relation("DepartmentToEligibility", fields: [departmentId], references: [id])
  employee         Employee[]
  eligibilityTypes EligibilityTypes // No default value for the enum field
  name             String
  value            String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([departmentId])
}

enum Gender {
  Male
  Female
}

model Employee {
  id                     String       @id @default(uuid())
  departmentId           String
  department             Department   @relation("DepartmentToEmployee", fields: [departmentId], references: [id])
  officeId               String
  offices                Offices      @relation("OfficesToEmployee", fields: [officeId], references: [id])
  prefix                 String       @default("")
  lastName               String       @db.Text()
  firstName              String       @db.Text()
  middleName             String
  suffix                 String
  gender                 Gender
  contactNumber          String
  position               String
  education              String
  birthday               DateTime
  age                    String       @default("")
  region                 String       @default("")
  province               String       @default("")
  city                   String       @default("")
  barangay               String       @default("")
  houseNo                String       @default("")
  street                 String       @default("")
  // zipCode        String
  gsisNo                 String
  tinNo                  String
  philHealthNo           String
  pagIbigNo              String
  salary                 Float
  dateHired              DateTime
  latestAppointment      String       @default("")
  terminateDate          String       @default("")
  salaryGrade            String       @default("")
  memberPolicyNo         String       @default("")
  nickname               String       @default("")
  emergencyContactName   String       @default("")
  emergencyContactNumber String       @default("")
  employeeTypeId         String
  employeeType           EmployeeType @relation(fields: [employeeTypeId], references: [id])
  eligibilityId          String
  eligibility            Eligibility  @relation(fields: [eligibilityId], references: [id])

  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  isHead     Boolean @default(false)
  isAwardee    Boolean @default(false)

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId])
  @@index([officeId])
  @@index([employeeTypeId])
  @@index([eligibilityId])
}

model Image {
  id         String   @id @default(uuid())
  employeeId String // Foreign Key to Product
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  url        String // URL of the image
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([employeeId])
}
